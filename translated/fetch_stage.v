//-------------------------------------------------------------------------
// FetchStage.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct BranchUpdate__target_32__mispredict_1__tag_3 Definition
typedef struct packed {
  logic [31:0] target;
  logic [0:0] mispredict;
  logic [2:0] tag;
} BranchUpdate__target_32__mispredict_1__tag_3;

// PyMTL BitStruct FetchPacket__pc_32__branch_taken_1__inst1_32__inst2_32__valid_1 Definition
typedef struct packed {
  logic [31:0] pc;
  logic [0:0] branch_taken;
  logic [31:0] inst1;
  logic [31:0] inst2;
  logic [0:0] valid;
} FetchPacket__pc_32__branch_taken_1__inst1_32__inst2_32__valid_1;

// PyMTL Component CombByteAddrROMRTL Definition
// Full name: CombByteAddrROMRTL__num_entries_256__bpw_8__data_[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]__num_ports_1
// At /Users/curtisbucher/Desktop/ramp-core/src/cl/fetch_stage.py

module CombByteAddrROMRTL__e033905bf33a5529
(
  input  logic [0:0] clk ,
  input  logic [7:0] raddr [0:0],
  output logic [63:0] rdata [0:0],
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__num_ports_at_up_read_rom  = 1'd1;
  logic [7:0] mem [0:255];

  // PyMTL Update Block Source
  // At /Users/curtisbucher/Desktop/ramp-core/src/cl/fetch_stage.py:92
  // @update
  // def up_read_rom():
  //   for i in range(num_ports):
  //     # TODO: generalize for any instruction window size
  //     s.rdata[i] @= concat(s.mem[ s.raddr[i] + 7],
  //                         s.mem[ s.raddr[i] + 6],
  //                         s.mem[ s.raddr[i] + 5],
  //                         s.mem[ s.raddr[i] + 4],
  //                         s.mem[ s.raddr[i] + 3],
  //                         s.mem[ s.raddr[i] + 2],
  //                         s.mem[ s.raddr[i] + 1],
  //                         s.mem[ s.raddr[i] + 0])
  
  always_comb begin : up_read_rom
    for ( int unsigned i = 1'd0; i < 1'( __const__num_ports_at_up_read_rom ); i += 1'd1 )
      rdata[1'(i)] = { mem[raddr[1'(i)] + 8'd7], mem[raddr[1'(i)] + 8'd6], mem[raddr[1'(i)] + 8'd5], mem[raddr[1'(i)] + 8'd4], mem[raddr[1'(i)] + 8'd3], mem[raddr[1'(i)] + 8'd2], mem[raddr[1'(i)] + 8'd1], mem[raddr[1'(i)] + 8'd0] };
  end

  assign mem[0] = 8'd0;
  assign mem[1] = 8'd0;
  assign mem[2] = 8'd0;
  assign mem[3] = 8'd0;
  assign mem[4] = 8'd0;
  assign mem[5] = 8'd0;
  assign mem[6] = 8'd0;
  assign mem[7] = 8'd0;
  assign mem[8] = 8'd0;
  assign mem[9] = 8'd0;
  assign mem[10] = 8'd0;
  assign mem[11] = 8'd0;
  assign mem[12] = 8'd0;
  assign mem[13] = 8'd0;
  assign mem[14] = 8'd0;
  assign mem[15] = 8'd0;
  assign mem[16] = 8'd0;
  assign mem[17] = 8'd0;
  assign mem[18] = 8'd0;
  assign mem[19] = 8'd0;
  assign mem[20] = 8'd0;
  assign mem[21] = 8'd0;
  assign mem[22] = 8'd0;
  assign mem[23] = 8'd0;
  assign mem[24] = 8'd0;
  assign mem[25] = 8'd0;
  assign mem[26] = 8'd0;
  assign mem[27] = 8'd0;
  assign mem[28] = 8'd0;
  assign mem[29] = 8'd0;
  assign mem[30] = 8'd0;
  assign mem[31] = 8'd0;
  assign mem[32] = 8'd0;
  assign mem[33] = 8'd0;
  assign mem[34] = 8'd0;
  assign mem[35] = 8'd0;
  assign mem[36] = 8'd0;
  assign mem[37] = 8'd0;
  assign mem[38] = 8'd0;
  assign mem[39] = 8'd0;
  assign mem[40] = 8'd0;
  assign mem[41] = 8'd0;
  assign mem[42] = 8'd0;
  assign mem[43] = 8'd0;
  assign mem[44] = 8'd0;
  assign mem[45] = 8'd0;
  assign mem[46] = 8'd0;
  assign mem[47] = 8'd0;
  assign mem[48] = 8'd0;
  assign mem[49] = 8'd0;
  assign mem[50] = 8'd0;
  assign mem[51] = 8'd0;
  assign mem[52] = 8'd0;
  assign mem[53] = 8'd0;
  assign mem[54] = 8'd0;
  assign mem[55] = 8'd0;
  assign mem[56] = 8'd0;
  assign mem[57] = 8'd0;
  assign mem[58] = 8'd0;
  assign mem[59] = 8'd0;
  assign mem[60] = 8'd0;
  assign mem[61] = 8'd0;
  assign mem[62] = 8'd0;
  assign mem[63] = 8'd0;
  assign mem[64] = 8'd0;
  assign mem[65] = 8'd0;
  assign mem[66] = 8'd0;
  assign mem[67] = 8'd0;
  assign mem[68] = 8'd0;
  assign mem[69] = 8'd0;
  assign mem[70] = 8'd0;
  assign mem[71] = 8'd0;
  assign mem[72] = 8'd0;
  assign mem[73] = 8'd0;
  assign mem[74] = 8'd0;
  assign mem[75] = 8'd0;
  assign mem[76] = 8'd0;
  assign mem[77] = 8'd0;
  assign mem[78] = 8'd0;
  assign mem[79] = 8'd0;
  assign mem[80] = 8'd0;
  assign mem[81] = 8'd0;
  assign mem[82] = 8'd0;
  assign mem[83] = 8'd0;
  assign mem[84] = 8'd0;
  assign mem[85] = 8'd0;
  assign mem[86] = 8'd0;
  assign mem[87] = 8'd0;
  assign mem[88] = 8'd0;
  assign mem[89] = 8'd0;
  assign mem[90] = 8'd0;
  assign mem[91] = 8'd0;
  assign mem[92] = 8'd0;
  assign mem[93] = 8'd0;
  assign mem[94] = 8'd0;
  assign mem[95] = 8'd0;
  assign mem[96] = 8'd0;
  assign mem[97] = 8'd0;
  assign mem[98] = 8'd0;
  assign mem[99] = 8'd0;
  assign mem[100] = 8'd0;
  assign mem[101] = 8'd0;
  assign mem[102] = 8'd0;
  assign mem[103] = 8'd0;
  assign mem[104] = 8'd0;
  assign mem[105] = 8'd0;
  assign mem[106] = 8'd0;
  assign mem[107] = 8'd0;
  assign mem[108] = 8'd0;
  assign mem[109] = 8'd0;
  assign mem[110] = 8'd0;
  assign mem[111] = 8'd0;
  assign mem[112] = 8'd0;
  assign mem[113] = 8'd0;
  assign mem[114] = 8'd0;
  assign mem[115] = 8'd0;
  assign mem[116] = 8'd0;
  assign mem[117] = 8'd0;
  assign mem[118] = 8'd0;
  assign mem[119] = 8'd0;
  assign mem[120] = 8'd0;
  assign mem[121] = 8'd0;
  assign mem[122] = 8'd0;
  assign mem[123] = 8'd0;
  assign mem[124] = 8'd0;
  assign mem[125] = 8'd0;
  assign mem[126] = 8'd0;
  assign mem[127] = 8'd0;
  assign mem[128] = 8'd0;
  assign mem[129] = 8'd0;
  assign mem[130] = 8'd0;
  assign mem[131] = 8'd0;
  assign mem[132] = 8'd0;
  assign mem[133] = 8'd0;
  assign mem[134] = 8'd0;
  assign mem[135] = 8'd0;
  assign mem[136] = 8'd0;
  assign mem[137] = 8'd0;
  assign mem[138] = 8'd0;
  assign mem[139] = 8'd0;
  assign mem[140] = 8'd0;
  assign mem[141] = 8'd0;
  assign mem[142] = 8'd0;
  assign mem[143] = 8'd0;
  assign mem[144] = 8'd0;
  assign mem[145] = 8'd0;
  assign mem[146] = 8'd0;
  assign mem[147] = 8'd0;
  assign mem[148] = 8'd0;
  assign mem[149] = 8'd0;
  assign mem[150] = 8'd0;
  assign mem[151] = 8'd0;
  assign mem[152] = 8'd0;
  assign mem[153] = 8'd0;
  assign mem[154] = 8'd0;
  assign mem[155] = 8'd0;
  assign mem[156] = 8'd0;
  assign mem[157] = 8'd0;
  assign mem[158] = 8'd0;
  assign mem[159] = 8'd0;
  assign mem[160] = 8'd0;
  assign mem[161] = 8'd0;
  assign mem[162] = 8'd0;
  assign mem[163] = 8'd0;
  assign mem[164] = 8'd0;
  assign mem[165] = 8'd0;
  assign mem[166] = 8'd0;
  assign mem[167] = 8'd0;
  assign mem[168] = 8'd0;
  assign mem[169] = 8'd0;
  assign mem[170] = 8'd0;
  assign mem[171] = 8'd0;
  assign mem[172] = 8'd0;
  assign mem[173] = 8'd0;
  assign mem[174] = 8'd0;
  assign mem[175] = 8'd0;
  assign mem[176] = 8'd0;
  assign mem[177] = 8'd0;
  assign mem[178] = 8'd0;
  assign mem[179] = 8'd0;
  assign mem[180] = 8'd0;
  assign mem[181] = 8'd0;
  assign mem[182] = 8'd0;
  assign mem[183] = 8'd0;
  assign mem[184] = 8'd0;
  assign mem[185] = 8'd0;
  assign mem[186] = 8'd0;
  assign mem[187] = 8'd0;
  assign mem[188] = 8'd0;
  assign mem[189] = 8'd0;
  assign mem[190] = 8'd0;
  assign mem[191] = 8'd0;
  assign mem[192] = 8'd0;
  assign mem[193] = 8'd0;
  assign mem[194] = 8'd0;
  assign mem[195] = 8'd0;
  assign mem[196] = 8'd0;
  assign mem[197] = 8'd0;
  assign mem[198] = 8'd0;
  assign mem[199] = 8'd0;
  assign mem[200] = 8'd0;
  assign mem[201] = 8'd0;
  assign mem[202] = 8'd0;
  assign mem[203] = 8'd0;
  assign mem[204] = 8'd0;
  assign mem[205] = 8'd0;
  assign mem[206] = 8'd0;
  assign mem[207] = 8'd0;
  assign mem[208] = 8'd0;
  assign mem[209] = 8'd0;
  assign mem[210] = 8'd0;
  assign mem[211] = 8'd0;
  assign mem[212] = 8'd0;
  assign mem[213] = 8'd0;
  assign mem[214] = 8'd0;
  assign mem[215] = 8'd0;
  assign mem[216] = 8'd0;
  assign mem[217] = 8'd0;
  assign mem[218] = 8'd0;
  assign mem[219] = 8'd0;
  assign mem[220] = 8'd0;
  assign mem[221] = 8'd0;
  assign mem[222] = 8'd0;
  assign mem[223] = 8'd0;
  assign mem[224] = 8'd0;
  assign mem[225] = 8'd0;
  assign mem[226] = 8'd0;
  assign mem[227] = 8'd0;
  assign mem[228] = 8'd0;
  assign mem[229] = 8'd0;
  assign mem[230] = 8'd0;
  assign mem[231] = 8'd0;
  assign mem[232] = 8'd0;
  assign mem[233] = 8'd0;
  assign mem[234] = 8'd0;
  assign mem[235] = 8'd0;
  assign mem[236] = 8'd0;
  assign mem[237] = 8'd0;
  assign mem[238] = 8'd0;
  assign mem[239] = 8'd0;
  assign mem[240] = 8'd0;
  assign mem[241] = 8'd0;
  assign mem[242] = 8'd0;
  assign mem[243] = 8'd0;
  assign mem[244] = 8'd0;
  assign mem[245] = 8'd0;
  assign mem[246] = 8'd0;
  assign mem[247] = 8'd0;
  assign mem[248] = 8'd0;
  assign mem[249] = 8'd0;
  assign mem[250] = 8'd0;
  assign mem[251] = 8'd0;
  assign mem[252] = 8'd0;
  assign mem[253] = 8'd0;
  assign mem[254] = 8'd0;
  assign mem[255] = 8'd0;

endmodule


// PyMTL Component FetchStage Definition
// Full name: FetchStage__data_[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]__size_256__window_size_2
// At /Users/curtisbucher/Desktop/ramp-core/src/cl/fetch_stage.py

module FetchStage
(
  input  logic [0:0] clk ,
  output FetchPacket__pc_32__branch_taken_1__inst1_32__inst2_32__valid_1 fetch_packet ,
  output logic [31:0] pc ,
  input  logic [0:0] reset ,
  input logic [0:0] br_update__en  ,
  input BranchUpdate__target_32__mispredict_1__tag_3 br_update__msg  ,
  output logic [0:0] br_update__rdy  
);
  localparam logic [5:0] __const__INSTR_WIDTH  = 6'd32;
  localparam logic [1:0] __const__window_size_at_combi  = 2'd2;
  logic [31:0] pc_next;
  //-------------------------------------------------------------
  // Component icache
  //-------------------------------------------------------------

  logic [0:0] icache__clk;
  logic [7:0] icache__raddr [0:0];
  logic [63:0] icache__rdata [0:0];
  logic [0:0] icache__reset;

  CombByteAddrROMRTL__e033905bf33a5529 icache
  (
    .clk( icache__clk ),
    .raddr( icache__raddr ),
    .rdata( icache__rdata ),
    .reset( icache__reset )
  );

  //-------------------------------------------------------------
  // End of component icache
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /Users/curtisbucher/Desktop/ramp-core/src/cl/fetch_stage.py:59
  // @update
  // def combi():
  //     if ~s.br_update.msg.mispredict | ~s.br_update.en:
  //         s.pc_next @= s.pc + 8  # TODO: branch prediction
  //     else:
  //         s.pc_next @= s.br_update.msg.target
  // 
  //     # calculating input address (converting from byte addr to word addr)
  //     s.icache.raddr[0] @= trunc(s.pc, s.addr_width)
  // 
  //     s.fetch_packet @= FetchPacket(
  //         s.pc,   # pc
  //         0,      # branch_taken TODO: branch prediction
  //         s.icache.rdata[0][0:INSTR_WIDTH],                           # instr1
  //         s.icache.rdata[0][INSTR_WIDTH : window_size * INSTR_WIDTH], # instr2
  //         1,      # valid
  //     )
  
  always_comb begin : combi
    if ( ( ~br_update__msg.mispredict ) | ( ~br_update__en ) ) begin
      pc_next = pc + 32'd8;
    end
    else
      pc_next = br_update__msg.target;
    icache__raddr[1'd0] = 8'(pc);
    fetch_packet = { pc, 1'd0, icache__rdata[1'd0][6'd31:6'd0], icache__rdata[1'd0][7'd63:6'( __const__INSTR_WIDTH )], 1'd1 };
  end

  // PyMTL Update Block Source
  // At /Users/curtisbucher/Desktop/ramp-core/src/cl/fetch_stage.py:51
  // @update_ff
  // def on_tick():
  //     # updating pc
  //     if s.reset:
  //         s.pc <<= 0
  //     else:
  //         s.pc <<= s.pc_next
  
  always_ff @(posedge clk) begin : on_tick
    if ( reset ) begin
      pc <= 32'd0;
    end
    else
      pc <= pc_next;
  end

  assign icache__clk = clk;
  assign icache__reset = reset;
  assign br_update__rdy = 1'd1;

endmodule
