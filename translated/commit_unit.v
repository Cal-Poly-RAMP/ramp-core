//-------------------------------------------------------------------------
// CommitUnit.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct BranchUpdate__target_32__mispredict_1__tag_3 Definition
typedef struct packed {
  logic [31:0] target;
  logic [0:0] mispredict;
  logic [2:0] tag;
} BranchUpdate__target_32__mispredict_1__tag_3;

// PyMTL BitStruct LoadStoreEntry__op_4__addr_32__data_32__rob_idx_5__mem_q_idx_4 Definition
typedef struct packed {
  logic [3:0] op;
  logic [31:0] addr;
  logic [31:0] data;
  logic [4:0] rob_idx;
  logic [3:0] mem_q_idx;
} LoadStoreEntry__op_4__addr_32__data_32__rob_idx_5__mem_q_idx_4;

// PyMTL BitStruct ROBEntryUop__0a11cf2a2340c105 Definition
typedef struct packed {
  logic [0:0] valid;
  logic [0:0] busy;
  logic [2:0] optype;
  logic [5:0] prd;
  logic [5:0] stale;
  logic [31:0] data;
  logic [3:0] mem_q_idx;
  logic [31:0] store_addr;
  logic [31:0] br_target;
  logic [2:0] br_tag;
  logic [0:0] br_mispredict;
  logic [7:0] br_mask;
} ROBEntryUop__0a11cf2a2340c105;

// PyMTL BitStruct ROBEntry__dfb4245d7bc69416 Definition
typedef struct packed {
  logic [31:0] pc;
  ROBEntryUop__0a11cf2a2340c105 uop1_entry;
  ROBEntryUop__0a11cf2a2340c105 uop2_entry;
} ROBEntry__dfb4245d7bc69416;

// PyMTL Component SingleCommit Definition
// At /Users/curtisbucher/Desktop/ramp-core/src/cl/commit_unit.py

module SingleCommit_noparam
(
  input  logic [0:0] clk ,
  input  ROBEntryUop__0a11cf2a2340c105 in_ ,
  output logic [5:0] ready_out ,
  output logic [5:0] reg_wb_addr ,
  output logic [31:0] reg_wb_data ,
  output logic [0:0] reg_wb_en ,
  input  logic [0:0] reset ,
  output logic [5:0] stale_out ,
  output logic [0:0] br_update__en  ,
  output BranchUpdate__target_32__mispredict_1__tag_3 br_update__msg  ,
  input logic [0:0] br_update__rdy  ,
  output logic [0:0] store_out__en  ,
  output LoadStoreEntry__op_4__addr_32__data_32__rob_idx_5__mem_q_idx_4 store_out__msg  ,
  input logic [0:0] store_out__rdy  
);
  localparam logic [3:0] __const__MEM_STORE  = 4'd8;
  localparam logic [2:0] __const__B_TYPE  = 3'd4;
  localparam logic [2:0] __const__J_TYPE  = 3'd6;
  localparam logic [1:0] __const__S_TYPE  = 2'd3;

  // PyMTL Update Block Source
  // At /Users/curtisbucher/Desktop/ramp-core/src/cl/commit_unit.py:74
  // @update
  // def comb_():
  //     s.reg_wb_en @= 0
  //     s.reg_wb_addr @= 0
  //     s.reg_wb_data @= 0
  //     s.stale_out @= 0
  //     s.ready_out @= 0
  // 
  //     s.store_out.en @= 0
  //     s.store_out.msg.addr @= 0
  //     s.store_out.msg.data @= 0
  //     s.store_out.msg.rob_idx @= 0
  //     s.store_out.msg.mem_q_idx @= 0
  //     s.store_out.msg.op @= MEM_STORE
  // 
  //     s.br_update.en @= 0
  //     s.br_update.msg.target @= 0
  //     s.br_update.msg.mispredict @= 0
  //     s.br_update.msg.tag @= 0
  // 
  //     # writeback loads / arithmetic to registers
  //     if s.in_.valid:
  //         # handling branchs TODO: need to handle JALR and linking registers (i-type)
  //         if (s.in_.optype == B_TYPE) | (s.in_.optype == J_TYPE):
  //             s.br_update.en @= 1
  //             s.br_update.msg.target @= s.in_.br_target
  //             s.br_update.msg.mispredict @= s.in_.br_mispredict
  //             s.br_update.msg.tag @= s.in_.br_tag
  //         # writeback stores to memory
  //         elif s.in_.optype == S_TYPE:
  //             s.store_out.en @= 1
  //             s.store_out.msg.addr @= s.in_.store_addr
  //             s.store_out.msg.data @= s.in_.data
  //             s.store_out.msg.mem_q_idx @= s.in_.mem_q_idx
  //             s.stale_out @= 0
  //             s.ready_out @= 0
  //         # writeback to registers
  //         else:
  //             s.reg_wb_en @= 1
  //             s.reg_wb_addr @= s.in_.prd
  //             s.reg_wb_data @= s.in_.data
  //             s.stale_out @= s.in_.stale
  //             s.ready_out @= s.in_.prd
  
  always_comb begin : comb_
    reg_wb_en = 1'd0;
    reg_wb_addr = 6'd0;
    reg_wb_data = 32'd0;
    stale_out = 6'd0;
    ready_out = 6'd0;
    store_out__en = 1'd0;
    store_out__msg.addr = 32'd0;
    store_out__msg.data = 32'd0;
    store_out__msg.rob_idx = 5'd0;
    store_out__msg.mem_q_idx = 4'd0;
    store_out__msg.op = 4'( __const__MEM_STORE );
    br_update__en = 1'd0;
    br_update__msg.target = 32'd0;
    br_update__msg.mispredict = 1'd0;
    br_update__msg.tag = 3'd0;
    if ( in_.valid ) begin
      if ( ( in_.optype == 3'( __const__B_TYPE ) ) | ( in_.optype == 3'( __const__J_TYPE ) ) ) begin
        br_update__en = 1'd1;
        br_update__msg.target = in_.br_target;
        br_update__msg.mispredict = in_.br_mispredict;
        br_update__msg.tag = in_.br_tag;
      end
      else if ( in_.optype == 3'( __const__S_TYPE ) ) begin
        store_out__en = 1'd1;
        store_out__msg.addr = in_.store_addr;
        store_out__msg.data = in_.data;
        store_out__msg.mem_q_idx = in_.mem_q_idx;
        stale_out = 6'd0;
        ready_out = 6'd0;
      end
      else begin
        reg_wb_en = 1'd1;
        reg_wb_addr = in_.prd;
        reg_wb_data = in_.data;
        stale_out = in_.stale;
        ready_out = in_.prd;
      end
    end
  end

endmodule


// PyMTL Component CommitUnit Definition
// Full name: CommitUnit__width_2
// At /Users/curtisbucher/Desktop/ramp-core/src/cl/commit_unit.py

module CommitUnit
(
  input  logic [0:0] clk ,
  input  ROBEntry__dfb4245d7bc69416 in_ ,
  output logic [5:0] ready_out [0:1],
  output logic [5:0] reg_wb_addr [0:1],
  output logic [31:0] reg_wb_data [0:1],
  output logic [0:0] reg_wb_en [0:1],
  input  logic [0:0] reset ,
  output logic [5:0] stale_out [0:1],
  output logic [0:0] br_update__en  ,
  output BranchUpdate__target_32__mispredict_1__tag_3 br_update__msg  ,
  input logic [0:0] br_update__rdy  ,
  output logic [0:0] store_out__en [0:1] ,
  output LoadStoreEntry__op_4__addr_32__data_32__rob_idx_5__mem_q_idx_4 store_out__msg [0:1] ,
  input logic [0:0] store_out__rdy [0:1] 
);
  localparam logic [1:0] __const__width_at_br_updt  = 2'd2;
  //-------------------------------------------------------------
  // Component commit_units[0:1]
  //-------------------------------------------------------------

  logic [0:0] commit_units__clk [0:1];
  ROBEntryUop__0a11cf2a2340c105 commit_units__in_ [0:1];
  logic [5:0] commit_units__ready_out [0:1];
  logic [5:0] commit_units__reg_wb_addr [0:1];
  logic [31:0] commit_units__reg_wb_data [0:1];
  logic [0:0] commit_units__reg_wb_en [0:1];
  logic [0:0] commit_units__reset [0:1];
  logic [5:0] commit_units__stale_out [0:1];
  logic [0:0] commit_units__br_update__en [0:1];
  BranchUpdate__target_32__mispredict_1__tag_3 commit_units__br_update__msg [0:1];
  logic [0:0] commit_units__br_update__rdy [0:1];
  logic [0:0] commit_units__store_out__en [0:1];
  LoadStoreEntry__op_4__addr_32__data_32__rob_idx_5__mem_q_idx_4 commit_units__store_out__msg [0:1];
  logic [0:0] commit_units__store_out__rdy [0:1];

  SingleCommit_noparam commit_units__0
  (
    .clk( commit_units__clk[0] ),
    .in_( commit_units__in_[0] ),
    .ready_out( commit_units__ready_out[0] ),
    .reg_wb_addr( commit_units__reg_wb_addr[0] ),
    .reg_wb_data( commit_units__reg_wb_data[0] ),
    .reg_wb_en( commit_units__reg_wb_en[0] ),
    .reset( commit_units__reset[0] ),
    .stale_out( commit_units__stale_out[0] ),
    .br_update__en( commit_units__br_update__en[0] ),
    .br_update__msg( commit_units__br_update__msg[0] ),
    .br_update__rdy( commit_units__br_update__rdy[0] ),
    .store_out__en( commit_units__store_out__en[0] ),
    .store_out__msg( commit_units__store_out__msg[0] ),
    .store_out__rdy( commit_units__store_out__rdy[0] )
  );

  SingleCommit_noparam commit_units__1
  (
    .clk( commit_units__clk[1] ),
    .in_( commit_units__in_[1] ),
    .ready_out( commit_units__ready_out[1] ),
    .reg_wb_addr( commit_units__reg_wb_addr[1] ),
    .reg_wb_data( commit_units__reg_wb_data[1] ),
    .reg_wb_en( commit_units__reg_wb_en[1] ),
    .reset( commit_units__reset[1] ),
    .stale_out( commit_units__stale_out[1] ),
    .br_update__en( commit_units__br_update__en[1] ),
    .br_update__msg( commit_units__br_update__msg[1] ),
    .br_update__rdy( commit_units__br_update__rdy[1] ),
    .store_out__en( commit_units__store_out__en[1] ),
    .store_out__msg( commit_units__store_out__msg[1] ),
    .store_out__rdy( commit_units__store_out__rdy[1] )
  );

  //-------------------------------------------------------------
  // End of component commit_units[0:1]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /Users/curtisbucher/Desktop/ramp-core/src/cl/commit_unit.py:46
  // @update
  // def br_updt():
  //     # handling single branch prediction output, with multiple uops
  //     # first uop that is a branch is the one that is committed
  //     s.br_update.en @= 0
  //     for x in range(width):
  //         if s.commit_units[x].br_update.en & ~s.br_update.en:
  //             s.br_update.en @= 1
  //             s.br_update.msg @= s.commit_units[x].br_update.msg
  //             s.commit_units[x].br_update.rdy @= s.br_update.rdy
  
  always_comb begin : br_updt
    br_update__en = 1'd0;
    for ( int unsigned x = 1'd0; x < 2'( __const__width_at_br_updt ); x += 1'd1 )
      if ( commit_units__br_update__en[1'(x)] & ( ~br_update__en ) ) begin
        br_update__en = 1'd1;
        br_update__msg = commit_units__br_update__msg[1'(x)];
        commit_units__br_update__rdy[1'(x)] = br_update__rdy;
      end
  end

  assign commit_units__clk[0] = clk;
  assign commit_units__reset[0] = reset;
  assign commit_units__clk[1] = clk;
  assign commit_units__reset[1] = reset;
  assign commit_units__in_[0] = in_.uop1_entry;
  assign commit_units__in_[1] = in_.uop2_entry;
  assign reg_wb_addr[0] = commit_units__reg_wb_addr[0];
  assign reg_wb_data[0] = commit_units__reg_wb_data[0];
  assign reg_wb_en[0] = commit_units__reg_wb_en[0];
  assign store_out__en[0] = commit_units__store_out__en[0];
  assign store_out__msg[0] = commit_units__store_out__msg[0];
  assign commit_units__store_out__rdy[0] = store_out__rdy[0];
  assign stale_out[0] = commit_units__stale_out[0];
  assign ready_out[0] = commit_units__ready_out[0];
  assign reg_wb_addr[1] = commit_units__reg_wb_addr[1];
  assign reg_wb_data[1] = commit_units__reg_wb_data[1];
  assign reg_wb_en[1] = commit_units__reg_wb_en[1];
  assign store_out__en[1] = commit_units__store_out__en[1];
  assign store_out__msg[1] = commit_units__store_out__msg[1];
  assign commit_units__store_out__rdy[1] = store_out__rdy[1];
  assign stale_out[1] = commit_units__stale_out[1];
  assign ready_out[1] = commit_units__ready_out[1];

endmodule
